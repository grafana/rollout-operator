// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/grafana/rollout-operator/pkg/apis/rolloutoperator/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultiZoneIngesterAutoScalerLister helps list MultiZoneIngesterAutoScalers.
// All objects returned here must be treated as read-only.
type MultiZoneIngesterAutoScalerLister interface {
	// List lists all MultiZoneIngesterAutoScalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiZoneIngesterAutoScaler, err error)
	// MultiZoneIngesterAutoScalers returns an object that can list and get MultiZoneIngesterAutoScalers.
	MultiZoneIngesterAutoScalers(namespace string) MultiZoneIngesterAutoScalerNamespaceLister
	MultiZoneIngesterAutoScalerListerExpansion
}

// multiZoneIngesterAutoScalerLister implements the MultiZoneIngesterAutoScalerLister interface.
type multiZoneIngesterAutoScalerLister struct {
	indexer cache.Indexer
}

// NewMultiZoneIngesterAutoScalerLister returns a new MultiZoneIngesterAutoScalerLister.
func NewMultiZoneIngesterAutoScalerLister(indexer cache.Indexer) MultiZoneIngesterAutoScalerLister {
	return &multiZoneIngesterAutoScalerLister{indexer: indexer}
}

// List lists all MultiZoneIngesterAutoScalers in the indexer.
func (s *multiZoneIngesterAutoScalerLister) List(selector labels.Selector) (ret []*v1alpha1.MultiZoneIngesterAutoScaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiZoneIngesterAutoScaler))
	})
	return ret, err
}

// MultiZoneIngesterAutoScalers returns an object that can list and get MultiZoneIngesterAutoScalers.
func (s *multiZoneIngesterAutoScalerLister) MultiZoneIngesterAutoScalers(namespace string) MultiZoneIngesterAutoScalerNamespaceLister {
	return multiZoneIngesterAutoScalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultiZoneIngesterAutoScalerNamespaceLister helps list and get MultiZoneIngesterAutoScalers.
// All objects returned here must be treated as read-only.
type MultiZoneIngesterAutoScalerNamespaceLister interface {
	// List lists all MultiZoneIngesterAutoScalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiZoneIngesterAutoScaler, err error)
	// Get retrieves the MultiZoneIngesterAutoScaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MultiZoneIngesterAutoScaler, error)
	MultiZoneIngesterAutoScalerNamespaceListerExpansion
}

// multiZoneIngesterAutoScalerNamespaceLister implements the MultiZoneIngesterAutoScalerNamespaceLister
// interface.
type multiZoneIngesterAutoScalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultiZoneIngesterAutoScalers in the indexer for a given namespace.
func (s multiZoneIngesterAutoScalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MultiZoneIngesterAutoScaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiZoneIngesterAutoScaler))
	})
	return ret, err
}

// Get retrieves the MultiZoneIngesterAutoScaler from the indexer for a given namespace and name.
func (s multiZoneIngesterAutoScalerNamespaceLister) Get(name string) (*v1alpha1.MultiZoneIngesterAutoScaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("multizoneingesterautoscaler"), name)
	}
	return obj.(*v1alpha1.MultiZoneIngesterAutoScaler), nil
}
